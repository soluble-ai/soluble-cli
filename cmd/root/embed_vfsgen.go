// Code generated by vfsgen; DO NOT EDIT.

// +build ci

package root

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// embeddedFS statically implements the virtual filesystem provided to vfsgen.
var embeddedFS = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 10, 8, 13, 22, 34, 959487455, time.UTC),
		},
		"/agent.hcl": &vfsgen۰CompressedFileInfo{
			name:             "agent.hcl",
			modTime:          time.Date(2020, 10, 8, 9, 54, 59, 537836518, time.UTC),
			uncompressedSize: 1903,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x6b\xdc\x30\x10\xbd\xef\xaf\x18\x74\xce\x66\xe9\xb5\x90\x43\x61\x4b\x31\x14\x5a\xf2\xd1\x4b\x29\x46\x6b\xcd\x7a\x45\x65\x4b\xd1\x8c\x36\x09\x8b\xff\x7b\x91\x2d\x7f\x26\xbb\x49\x7d\xb1\x2c\xcf\x9b\x79\x7a\x6f\x34\xd2\xe9\xdc\x79\xdc\xeb\x67\xb8\x01\xb1\x91\x4e\x6f\x8e\x9f\xc4\x6a\x55\xd8\xaa\x92\xb5\x02\x51\x7a\x1b\x9c\x00\x21\x4b\xac\x59\xc0\x69\x05\x40\x07\xeb\x39\x86\x8b\x15\xc0\x10\xe8\xbc\xae\x39\x2f\x4c\x20\x46\x2f\x40\x18\x4d\xbc\x66\xfb\x17\x6b\xea\x60\x3d\x30\x22\xbf\x6b\x62\xd0\x44\x01\x15\xb4\x99\x21\x45\xb6\x71\x15\xf2\xc1\xaa\x18\xf7\xed\xeb\x7d\xb7\xe5\x24\x1f\xa0\x85\x5a\x5f\x6e\x4e\xd6\x97\xcd\xa6\x05\xae\xa7\x40\x8f\x14\x0c\xa7\x6a\x09\x74\x03\xbf\x85\x92\x2c\xc5\x9f\xb4\x5b\x58\x13\xaa\x9a\xe2\x8f\xb4\x03\x20\xb4\x12\x57\x20\x88\x25\x07\x8a\x2b\x7c\x76\xda\x4b\xd6\xb6\xbe\x6f\xbf\x3b\xae\xdd\xda\x48\xe2\x07\xc2\xf8\x91\x12\xf4\xa9\xf7\xd6\x57\x92\x19\x7d\xcc\x7e\x1a\xb2\x0f\x00\xf8\x0c\xc2\xa3\x91\xac\x8f\x98\x73\x22\x1d\x9f\x69\xb9\x33\x41\x4d\x7a\x93\xf5\x9c\xef\x5e\xe6\xf4\xd7\x23\xa7\x19\xa5\x08\x6a\xde\x72\x49\xb7\x6e\x8a\x12\xf9\xb5\x39\x77\x07\xfb\x04\x0a\x59\x6a\x43\x60\xf7\x20\xeb\xe4\x91\xae\x89\x65\x5d\xe0\x3b\x96\xd0\xe6\xd4\xbe\xb3\x6d\x73\xc1\x4f\x2f\x2b\x64\xf4\xa9\xb3\xb2\xad\x18\x04\x0b\x24\x4b\x4c\x27\xbb\x01\x71\x7f\xc0\x45\x7d\xc8\xb6\xfd\x31\x3d\x3e\x06\xed\x51\x75\xb1\xec\x03\xa6\x1f\x4a\x93\xb3\xa4\xa3\xa4\x31\x49\x61\x6b\xc6\x67\x16\x97\x55\xe9\x7b\xd7\x23\xb1\xf4\x6f\x48\x73\x8b\x8f\x01\x89\x47\x49\xd8\x42\x1f\x7c\x56\x94\x94\x97\x36\xa7\xb4\xca\xb6\xcd\x66\x86\x1a\x05\xfa\xf9\xe3\xae\x55\xe8\x22\xbd\xe0\x94\x64\x7c\xcd\xee\xa1\xdd\x07\x3e\x20\x1c\xd1\x53\x3c\xfa\xc4\xbe\xff\x24\xd8\x15\x59\x4f\xa0\xaf\x59\xce\x7c\x64\x59\x2e\x3d\x4c\xee\x91\xc3\x42\xef\x75\x31\xb0\x62\x0b\xc1\x95\x5e\x2a\x04\xb6\xd7\x00\xd9\x1e\x42\x4d\xc8\x57\x40\x2c\x77\x06\xe1\x49\x1b\x03\x3b\x84\x40\xa8\xae\x47\xd3\x66\xf5\x3c\xb6\x06\x5b\xff\x72\xa6\xec\x4e\x12\xc2\x18\x35\xaf\xfa\xc1\x4e\x88\x53\x6c\x21\xf4\xec\xe9\x67\x59\xd7\xf8\x5d\xd2\x84\xce\xb5\xca\xad\x8b\x0d\x28\xcd\xb4\x37\x93\x03\xcb\x34\xcb\x4b\x34\xd3\x7c\x19\xfc\xd6\x3d\xea\xbd\x53\xa3\x1c\xa9\xeb\xf3\xa3\x34\xa1\x95\x65\xf0\x77\xaa\xe9\xb9\xa9\x99\x78\x5c\x9c\x9b\xdd\xe5\x4d\xf7\x32\x6b\x87\xe8\xc8\xe3\x2a\xfd\xff\xd5\xd9\x3e\x7c\xdf\xc5\xce\xef\x66\x69\xd7\x65\x93\x51\xda\xe7\xbc\xc5\xca\x32\x66\x2e\x06\x55\x58\x7d\x31\xc6\x16\xdd\x9a\xa2\xc7\xe2\x63\x93\x77\x84\xc6\xa9\xba\x7b\x61\x9c\x0c\xdd\xb1\xf8\x3b\x23\xb7\xb0\x95\x0b\x8c\x2a\x1f\x25\x18\x4b\x24\x42\x31\xc5\x5e\x7b\xe2\x7c\xc1\xb0\x99\x34\x5a\xf3\x2f\x00\x00\xff\xff\x7c\xf7\x57\xc6\x6f\x07\x00\x00"),
		},
		"/auth.hcl": &vfsgen۰CompressedFileInfo{
			name:             "auth.hcl",
			modTime:          time.Date(2020, 10, 8, 9, 54, 59, 538014176, time.UTC),
			uncompressedSize: 865,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4f\x0b\xd3\x40\x10\xc5\xef\xf9\x14\xc3\x9c\xad\xc1\x0f\xd0\x83\xd0\x20\x42\x41\xc1\x7a\x12\x29\x6b\x76\xda\x1d\x9a\x64\xd7\x9d\x59\x6d\x29\xfd\xee\x92\x3f\x1b\x6b\x4a\x91\x16\x7a\x99\xf7\xde\x4c\xde\x8f\x35\x81\xf7\x21\xd2\x81\xcf\xb0\x06\x2c\x4d\xe0\xf2\xd7\x3b\x2c\x8a\xda\xb7\xad\xe9\x2c\xe0\x31\xfa\x14\x10\xd0\x24\x75\x08\xd7\x02\x40\x9c\x8f\xda\xbb\xb1\x00\x98\x7d\x21\x72\xa7\xfb\xba\x61\xea\x14\x01\x1b\x16\x5d\x89\xb8\xd5\x89\x2e\x32\xe6\x72\xb2\x8f\x6e\x59\x14\x44\x1c\x0c\xf2\x20\xb6\xa4\xce\xdb\x5e\xfc\x50\xed\xc6\x51\x30\xea\x60\xf0\x27\xa1\x28\x65\x88\xfe\xc0\x0d\x95\xf3\xde\xc1\x15\x49\x52\xa3\xd3\x89\x39\x34\xfe\xd6\xf0\xed\xfb\x34\xaf\x7d\x93\xda\x4e\xe6\x39\xb2\xc5\x37\x80\x96\xa4\x8e\x1c\x94\x7d\x87\xd9\xfa\x9b\x2d\xed\xb3\xbf\xb7\x9e\xe8\x32\x89\xb7\x62\xfc\x3f\xeb\x6d\xac\xcd\xb5\x1f\x5b\xbf\xb7\x16\x4c\x97\x7b\xbf\xd2\xf1\x2f\x9c\xcf\x9f\xbe\xcc\x74\xa2\x69\x49\x29\x02\x1e\x59\x5d\xfa\xf1\x55\x28\xe2\xcc\x21\x89\x39\x52\xbe\x9a\x51\xc3\x21\xfa\x16\x0c\x8c\x81\xb7\xb5\x6f\xa1\x3f\x8b\x73\xb7\x7f\xd6\xde\x95\x58\xec\x5b\xb6\xf8\x1f\x16\x4b\x0d\x29\x3d\x27\xb3\x19\xf4\x97\xe1\x94\x57\xb6\xb7\x25\xa1\x4d\xb5\xad\x76\xd5\x03\x23\xb6\xcb\x2e\xf9\x29\xe0\xce\x51\xbe\x0b\x1f\x37\xa0\x1e\xc6\xef\xc5\xc9\x1e\xe9\x67\xe2\x48\x76\xb4\x6b\x4c\x34\x09\x96\x25\x78\xe1\xfe\xf1\xf4\x7b\x6a\xdf\x29\x9d\xf5\x1e\xc9\xed\x4f\x00\x00\x00\xff\xff\x5b\x17\xc2\x13\x61\x03\x00\x00"),
		},
		"/aws.hcl": &vfsgen۰CompressedFileInfo{
			name:             "aws.hcl",
			modTime:          time.Date(2020, 10, 8, 9, 54, 59, 538191158, time.UTC),
			uncompressedSize: 1664,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4f\x6b\xdb\x4e\x10\xbd\xeb\x53\x0c\x7b\xf9\x1d\x7e\x09\xa2\x1f\x20\x07\x43\xd4\xd2\x92\x90\x52\x9b\xf6\x50\x4a\x18\x76\xc7\xd2\x52\x69\x57\x9d\x9d\x8d\xe3\x18\x7f\xf7\xb2\xfa\x63\xab\x8e\x0c\x75\xe9\xa1\x06\x83\x3c\xf3\xe6\xed\xbc\xb7\x4f\xc6\xd6\x3e\xb6\x4c\x6b\xfb\x0c\x37\xa0\x72\x6c\x6d\xfe\xf4\x46\x65\x99\xf6\x4d\x83\xce\x80\x2a\xd9\xc7\x56\x81\xc2\x4d\x50\xb0\xcb\x00\x42\xe5\x59\x12\xf8\x1e\x1d\x96\x04\x8b\x2f\x4b\xb0\x4e\xa8\x64\x14\xeb\x9d\xca\x32\x80\xc3\x74\xcb\xd6\xc9\xa3\xae\x2d\x39\x51\xa0\x6a\x1b\xe4\x1a\xb5\xf6\xd1\xc9\x40\x37\x12\x26\xc6\x3b\x1b\xa4\xe3\x1b\x21\xa0\x23\x33\x39\xa9\xb7\xa0\xbd\x5b\xdb\x32\x32\x19\xd5\x4d\xb5\x28\x15\x74\x53\x9e\xcb\x7c\xe7\xb9\x44\x67\x5f\xba\x15\xde\xdf\xee\x73\xdc\x84\xfc\x70\x50\x37\xd0\x90\x54\xde\xa4\x81\x77\xc5\xaa\x2f\x31\x85\x58\xcb\xb0\xc6\x40\x79\x03\x5f\x95\x41\x41\xf5\x6d\xa8\x6a\x5f\xc7\xc6\x85\xd4\x18\x2a\x00\x6a\xa0\x56\x57\xc7\x92\xc3\x86\xa6\xbf\x3d\x97\x8b\xd7\xa8\x1a\x83\x2c\x35\xba\x65\xd4\x9a\x42\x58\x85\xff\xa7\xdd\xd8\x1a\x14\x4a\xc5\xa1\x36\x2e\xb1\xb1\x86\x1e\x67\x37\x49\xc7\xbe\x65\xdf\x3c\x70\x39\x7f\xfa\x82\xdd\x49\xa3\x68\xd0\xd6\xea\xaa\x7b\xfe\xe0\xad\x23\x73\xdf\x79\x73\x02\xeb\x5b\xab\x30\x20\x97\x82\x12\xc3\x9c\x96\xc2\x75\xa8\x19\x91\x82\x2c\x93\x56\xaf\x66\x9f\xf5\xdf\x73\x21\xd1\x15\xe9\xef\x29\x25\x14\x66\x32\xf2\x99\xd8\xae\xb7\x63\x4a\x12\xe4\xdc\xed\x5e\x90\x90\x7c\x37\x3c\xed\xf3\xd0\xcb\x1c\x18\x18\x1b\x12\xe2\xe3\x85\x1f\xc2\x12\x43\x0a\x7f\xff\xb9\x01\x35\x49\x2d\x58\x33\x5e\x9f\xb1\xa1\xf5\xc1\xa6\x23\x13\x48\x7b\x27\xf4\x2c\x63\x97\xe9\x47\xb4\x4c\xa6\xa7\x10\x8e\xf4\x5b\xfe\xa0\x31\xd7\x27\xeb\x1c\xed\x59\x18\x03\xe8\xa6\x2f\xd1\xa9\x3f\x1f\x1f\x96\x97\x1b\x74\x81\x1f\x67\xcd\x38\xc8\xbd\x40\x2b\x53\xe3\x9f\xe8\xbc\xdc\x4f\x5d\x7f\x56\xf1\x1f\x5d\xff\xa9\x59\xb7\xc5\x5d\xb1\x2a\xfe\xe5\x34\x04\x5d\x91\x89\x35\x5d\x87\xad\xd3\xaf\x0d\xea\x5e\x41\x48\xbd\x8a\xbd\xb3\x2f\xd6\x95\x90\x22\x4e\xb0\xb1\x52\x01\xd6\x35\xf8\x35\x48\x45\x30\x35\xe8\xbf\xf0\xcb\xdf\xf0\x5f\x89\x50\x7e\xdc\x54\xa3\x53\x9d\xac\x7d\xf6\x33\x00\x00\xff\xff\x15\x09\xb1\xe7\x80\x06\x00\x00"),
		},
		"/cinderella.hcl": &vfsgen۰CompressedFileInfo{
			name:             "cinderella.hcl",
			modTime:          time.Date(2020, 10, 8, 9, 54, 59, 538372254, time.UTC),
			uncompressedSize: 658,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x4d\x8b\x14\x41\x0c\x86\xef\xfd\x2b\x42\xce\x2b\x8d\xec\x4d\x98\x83\xa8\x88\xe0\x17\xb8\x37\x91\x26\x76\x67\x7b\x8a\xad\x2f\x93\xf4\xba\xc3\xd2\xff\x5d\xaa\xba\x66\x06\xc7\x01\x6f\x5d\x09\x79\xde\x27\x69\xca\x6e\xc8\xc2\xf7\xee\x09\x76\x80\x3d\x65\xd7\x3f\xbe\xc4\xae\x1b\x53\x08\x14\x27\xc0\x59\xd2\x92\x11\x70\x74\x71\x62\x61\xef\x09\xe1\xb9\x03\xd0\x7d\x12\x2b\x33\x9f\x28\xd2\xcc\x60\x1c\x72\x12\x92\x03\x3c\xdc\x2a\x8c\x7e\x51\x63\x51\xec\x00\x4e\xa8\x2c\x2e\xda\xd0\x5a\x05\x29\x4c\xc6\x1b\xee\x08\x2c\xc4\x37\xb5\x0e\x04\x91\x7f\x5f\xe7\x62\x9d\x08\x6c\xfb\x34\x95\x89\xaf\x5f\xbe\xdd\x6d\xb5\x4c\xb6\x87\x4a\x49\x32\xf7\xcf\x49\xe6\xb5\x3f\xab\xf7\x0f\xb7\x55\x69\xbd\xa6\xe5\x38\x1a\x02\x7a\xa7\xf6\xaf\xd3\x47\xa7\x06\x67\xd0\x5f\x0b\xfe\x37\x55\xf8\xd7\xc2\x6a\x7a\xa9\xfd\xfe\x5d\xb3\x16\xd6\xc5\x5b\x0b\x6d\xb8\x1d\x7c\xc7\x89\x8c\xf0\x47\xab\x8e\xc9\x2f\x21\x6a\x69\xb4\x0a\x00\x36\xf4\x87\x09\x6f\x00\x5d\x7e\x3d\x4d\xc2\xaa\xe5\xa1\x46\xb6\xd4\xaf\x45\x59\xde\x3a\xcd\x9e\x0e\x9f\x29\x70\x29\x6d\xa7\xbf\xab\x6d\x7e\xca\x4e\xc8\x5c\x8a\xdb\x3b\xb0\x2a\xcd\x8c\x37\x2d\xe5\x98\x7f\x9f\x24\x90\x95\xa5\x61\x77\x52\x85\x8b\x79\x78\x55\x9c\x3c\x99\x7b\xe4\xe1\xb8\xf1\x76\xf0\x7a\xd0\x24\x36\xfc\x3c\xd4\xe5\x5e\x9c\x24\xb6\x84\xb5\xfe\x98\xf5\x4f\x00\x00\x00\xff\xff\x1b\x36\x8a\x4c\x92\x02\x00\x00"),
		},
		"/cluster.hcl": &vfsgen۰CompressedFileInfo{
			name:             "cluster.hcl",
			modTime:          time.Date(2020, 10, 8, 9, 54, 59, 538534347, time.UTC),
			uncompressedSize: 1126,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xcd\x8e\xd3\x30\x10\xc7\xef\x7d\x8a\x91\xaf\x14\x55\x5c\x91\x7a\x40\xdb\x68\x59\x69\x41\x1c\x22\x2e\x68\x15\xcd\xd6\xd3\xc4\xc2\xb1\x8d\x3d\x06\x56\x55\xde\x1d\x39\x76\xd3\x24\xcb\xd7\xe6\x94\x19\xff\x67\xfc\x9b\x0f\xa3\x53\x8d\xf3\x74\x52\x3f\x61\x0f\x62\x87\x4e\xed\xbe\xbf\x11\x9b\xcd\xd1\xf6\x3d\x1a\x09\xa2\xf5\x36\x3a\x01\xe2\xa8\x63\x60\xf2\x02\xce\x1b\x80\xd0\x59\xcf\x29\xe0\x03\x1a\x6c\x09\xca\x61\x10\x1b\x80\x29\xd2\x79\x65\xb8\x99\xe2\x44\x4b\x9c\xa3\x2f\xf1\x29\xc1\x2d\x31\x48\x62\x54\x3a\x80\x3d\x01\x42\x50\xa6\xd5\x53\x46\x31\xca\x7b\xe2\xce\xca\x51\x5e\xd5\xd9\xe5\x90\x3b\x18\x33\x58\xdf\xee\xce\xd6\xb7\xc3\xee\x42\xb1\x3b\x97\xbf\xbb\xc3\x90\xd4\xc3\xdf\xa8\x02\xf1\x6b\x83\x3d\x3d\x47\xbb\xe9\xd0\xb4\x04\xdc\x11\x24\x41\xc6\xfb\x03\xd7\xa7\x77\xf5\xcd\xfb\x97\x93\x25\xb5\xc7\x9e\x98\x3c\x08\xa9\x82\xd3\xf8\xf4\x71\x06\x03\xe0\xe9\x5b\x54\x9e\xd2\x25\xec\x23\x15\x6f\x0c\xa9\xeb\xf9\x96\x3a\xf1\xd1\x0f\x28\xe1\x99\xf5\x64\xfd\x08\xbe\xc0\x1d\xfe\xd5\x0b\xad\xc2\x7a\x44\x8b\x6f\x0f\xe2\x5e\x05\x5e\x8c\x7b\xea\xc2\x5a\xb9\x1e\xd5\xfa\xfc\x79\x77\xb2\xbc\x58\x8d\x92\x8d\x75\xac\xac\x41\x3d\x2f\xde\x53\x88\x9a\xa7\xfe\x8c\xc9\xf7\xf0\x45\x48\x64\x14\x0f\xc5\x7b\xb4\x3a\xf6\x26\xe4\x03\x3a\x61\xd4\x2c\xb6\xcb\x0e\x6f\xa7\x95\xbe\x93\x33\xa3\x32\xd2\x59\x65\x58\x6c\x4b\x2a\x11\x9d\x44\xa6\x3a\xbc\x9a\xa9\xf2\xda\xfb\xe4\xf9\x1a\x1f\xe9\x56\xf1\x67\xf2\x41\x59\x93\x3c\xd8\x92\x99\xd9\x57\xa6\xde\x45\x26\xd9\x5c\xe1\x2e\x45\x00\x14\x48\x78\x0b\x42\x85\xa6\x58\xcd\x62\x7a\x79\x76\xe3\x68\xac\xe7\xe6\xf1\x29\x57\x37\x2b\xe9\xe1\xff\xa6\x2c\x49\x13\xff\x66\xdf\x0f\xa3\x7f\xbd\xe3\x2f\x5b\xe7\xeb\x8b\x38\x54\xf7\x55\x5d\xe5\xe7\x37\xfc\x0a\x00\x00\xff\xff\xc0\x7f\x9a\x6b\x66\x04\x00\x00"),
		},
		"/elevate.hcl": &vfsgen۰CompressedFileInfo{
			name:             "elevate.hcl",
			modTime:          time.Date(2020, 10, 8, 9, 54, 59, 538679768, time.UTC),
			uncompressedSize: 1639,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\x4f\x6f\xdb\x3e\x0c\xbd\xe7\x53\x10\xba\xf4\x92\x5f\x83\xdf\x07\xc8\x65\x68\x30\x14\xeb\xfe\x60\x4b\x4f\x43\x11\xa8\x16\x93\x68\x95\x25\x8f\xa4\xb2\x16\x41\xbe\xfb\x20\xdb\x92\xdd\xa4\x1e\x06\xac\x87\xc2\x11\xc9\xc7\x27\xbe\x27\xea\xc6\x6e\x1a\xc2\xad\x7d\x86\x25\xa8\x85\x6e\xec\xe2\xf0\xbf\x9a\xcd\xaa\x50\xd7\xda\x1b\x50\x3b\x0a\xb1\x51\xa0\xd0\xe1\x41\x0b\x2a\x38\xce\x00\x78\x1f\x48\x52\xc1\x57\xfc\x19\x91\x05\x04\xeb\x26\x90\xa6\x17\xe8\xf3\x0c\xe8\xaa\x42\x66\x90\x00\x4f\xf1\x11\xc9\xa3\x20\x43\xe5\x22\x0b\x12\xab\x19\x40\x69\xd1\x90\xf5\xb2\xe9\x43\x0a\x94\xb3\x2c\x5d\x9f\xdc\xe9\xf5\xdf\x12\xd4\x9d\x65\x19\x5a\x31\x32\xdb\xe0\x5b\x54\x80\x1a\x65\x1f\xcc\x45\xc9\xfb\xd5\xba\x8b\xf7\x8d\x36\xd6\x6c\x42\x23\x36\x78\xed\x60\x09\x42\x11\xdb\x70\xa3\x65\x0f\x97\x1d\x03\xed\x16\xc7\x40\xbb\xd3\x22\x4f\xa2\xcf\x26\x5d\xa3\x20\x81\xea\x71\x6f\x4d\xe6\x9e\xae\xe8\x05\x9f\x65\x73\xd0\x2e\x62\x42\xc9\x39\x37\x5d\xf5\xa9\xfd\x4f\xc8\xd1\x49\x29\x6a\x09\x2c\xe1\xbb\x32\x5a\xb4\x7a\x28\x50\x2e\xd6\x9e\x53\x60\x96\x69\xa9\xfe\xe2\xb7\x46\xcd\x41\xb1\x24\x56\xe9\x23\xb8\xf8\xe8\xf0\x9e\x91\xd2\x4f\x0a\x0e\x3f\x58\x6f\xf2\xf7\x27\x5d\xb7\x69\x5e\xd7\xc8\x8d\xae\x50\xcd\x47\x88\xf1\xf1\x07\x56\x92\x73\x4c\x24\x9d\x46\xf4\xd1\xfa\x28\xc8\xe9\xa8\x22\xd4\x82\xeb\x7e\xd8\x00\x99\xe0\x2f\x6b\x70\x33\x62\xf9\xaa\xef\x39\xce\x43\xb9\xfe\xe9\x4f\x4e\xa0\xce\x5e\x67\x66\x18\xf9\xae\x58\xa0\x22\x34\xe8\xc5\x6a\xc7\x60\x3d\xe8\xac\xb2\x1a\x6b\xfa\x4a\xc6\x3e\x61\x71\x2c\x9a\x9c\x49\xdb\xfb\x68\x09\xea\xcb\xe7\x6f\xeb\x0b\xb9\xc7\x93\x9a\x16\x7c\xf0\xfe\x26\x72\xa6\x73\x9a\xc0\x6a\xa7\x55\xb0\x9c\x15\x24\xed\x06\xac\xfb\x69\x80\x41\xcb\x52\x1e\x59\xef\xda\xb2\xf5\x1e\x81\x1b\xac\xec\xd6\x56\x50\x12\xd3\xc3\xec\xc7\x3b\x3c\xd5\x09\xf4\xa4\xe4\x04\x70\x0a\xbd\x09\x75\x0d\xf0\xee\x05\x0c\x6e\x75\xf2\x36\x5a\xd9\x23\xc1\x95\x36\xb5\xf5\x57\xb0\x0d\x34\x30\xe1\x39\x04\x82\xab\x5e\x86\xff\x46\x29\xf9\x28\x59\x6b\x82\xda\xc8\x58\x12\x91\x27\x58\xe6\x2c\x08\x5b\x90\x3d\x5e\x6c\x8e\x79\xf2\x4c\xdd\x79\xf3\x5a\xfd\xad\x37\x0f\xe1\x09\xdf\xb2\x66\x3a\x07\xed\x2f\xba\xfc\xbb\x31\x17\xc7\xf2\xe2\x4f\xe7\x26\xbd\x59\xdd\xad\xd6\xab\x4b\x9b\x96\x15\x71\x36\x9a\xb2\xd9\xd6\xc3\x40\x0a\xd3\xdb\x9b\x4e\xd4\xf6\x8a\x7d\x99\xb1\xdc\x04\xb6\xed\x1c\xd3\x2a\xeb\xac\x9e\xa3\xc9\x00\x96\xd0\x74\xa0\x65\x9b\x76\x63\x3c\xfd\x0e\x00\x00\xff\xff\xce\x22\x72\x09\x67\x06\x00\x00"),
		},
		"/job.hcl": &vfsgen۰CompressedFileInfo{
			name:             "job.hcl",
			modTime:          time.Date(2020, 10, 8, 9, 54, 59, 538827395, time.UTC),
			uncompressedSize: 1832,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x5d\x6b\x1b\x31\x10\x7c\xf7\xaf\x18\xf4\xd4\xd2\x86\x6b\x7e\x80\x1f\x0a\x36\xa1\x90\x7e\xd0\xf8\xad\x14\xb3\xbe\x5b\xdf\xc9\xe8\xa4\xab\xb4\x4a\x03\xc6\xff\xbd\xe8\xbe\xec\x26\x97\x3a\x81\x96\x12\x83\xe1\xa4\x9d\xd5\xde\xcc\xec\x9e\xa8\xd1\xeb\xc6\xf3\x56\xdf\x61\x0e\x95\x51\xa3\xb3\xdb\x4b\x35\x9b\xe5\xae\xae\xc9\x16\x50\xa5\x77\xb1\x51\x50\x3b\xb7\x51\xd8\xcf\x80\x50\x39\x2f\x09\xfc\x91\x2c\x95\x8c\xdc\xc4\x20\xec\xb1\x73\x9b\xa0\x66\xc0\x98\xd9\x78\x6d\x65\x9d\x1b\xcd\x56\x14\x94\xd1\x41\x2e\x84\xeb\xc6\x90\x70\xe8\xce\x1a\x4e\x4b\xc7\x5d\xeb\x20\xe9\x10\x1c\x31\x2d\xa2\x66\xa9\x5c\x91\x10\x57\xcb\x55\xb7\xd5\x90\x54\x68\x93\x9c\x2f\xb3\xbd\xf3\xe5\x21\xdb\xb9\xcd\xc5\xbd\x4c\xcf\x21\x1a\xe9\x0b\x8d\x59\x98\xe3\x9b\x3a\x22\xbf\xf7\xd1\xdc\x99\x58\xdb\xd0\x46\x2d\xd5\xac\xde\x42\x15\x1c\x72\xaf\x1b\xd1\xce\xf6\xb8\xc3\xac\xfb\xff\x89\xe4\xe3\xd4\x9e\xcd\x68\x08\x7a\xaa\x39\x69\xac\x8c\xae\xf5\x58\x00\x28\x78\x4b\xd1\xc8\xfa\x96\x4c\x64\xcc\x71\xf9\xae\x0f\xc4\x90\xac\x19\x7e\x73\xa8\xaf\x2c\xd1\x5b\x58\x87\xda\x79\x86\x54\x64\x21\x95\x0e\xb0\xb1\xde\xb0\x87\xdb\x9e\xbc\xe0\xe1\x9c\x7c\x2d\x74\x4a\xb9\xbe\x19\x3e\x14\x49\xbe\x9d\xdb\x8c\x0f\x9f\x7a\x49\x73\xcf\x24\xbc\x0a\xa7\xcf\x6f\xd2\x22\x36\xc5\x71\x11\x84\x24\x26\xcc\x19\xd5\xdb\x62\x43\x6f\x8d\xcb\x47\xe5\x87\xb3\xa0\x24\xa7\xe8\x3c\x1a\xf2\x43\xef\x3e\xcb\x96\x3e\x27\x64\xfb\x81\xec\xe2\x65\x7a\xf5\xef\xed\xe9\x87\xa2\xe4\x89\x99\xb8\x62\x41\xc1\x42\xda\x84\x44\x88\x10\xb4\x2d\x0d\x63\x54\xf2\xe9\x53\x92\xed\x13\x95\xc5\xe1\x81\x03\xed\xf6\xd1\x81\x53\xa1\xe7\x50\xab\xaa\xad\x06\x5d\xa8\xc1\x22\x1d\x1a\x17\x74\x9a\xf7\x04\xc8\x9d\x15\xbe\x93\x21\xea\xf9\x47\xd4\x9e\x8b\x2e\x5d\x7c\xe4\x27\xb1\xcf\xc9\xe6\x6c\x1e\x0a\xf0\x5e\xd2\x47\x48\x20\x0e\x1d\x04\x04\x1f\xad\xd5\xb6\x9c\x12\x61\xb1\xbc\x5e\xae\x96\xff\x5f\x87\xb3\xb3\x18\x84\xfc\x84\xdf\x37\x69\x1b\x04\xcb\x3f\xa7\xe8\x7d\xf9\x7c\xf3\x37\x66\xae\xfd\x72\xdf\x23\xda\x53\x4c\xa1\xd4\x69\xd2\xd3\x1d\xae\x00\xbc\x0a\xdc\xed\xfc\x7e\x43\xbd\x3e\xe5\x7b\xf8\x15\x00\x00\xff\xff\x88\x0e\xb5\x10\x28\x07\x00\x00"),
		},
		"/kubernetes.hcl": &vfsgen۰CompressedFileInfo{
			name:             "kubernetes.hcl",
			modTime:          time.Date(2020, 10, 8, 9, 54, 59, 538980404, time.UTC),
			uncompressedSize: 3978,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x0c\x78\x5d\x07\xc6\xde\x16\x06\x72\xcb\xa2\x28\x0a\xe4\xe4\x5b\x11\x08\x13\x69\x6c\x33\x91\x48\x96\x1c\xba\x71\x0d\xfd\xf7\x82\x14\x25\x4b\x4a\xd4\xb8\x5f\x48\xd0\x46\x27\x99\x9a\x99\xf7\x86\x7c\x8f\x63\x34\x32\x37\x96\x36\xf2\x01\x2e\x41\x2c\xd1\xc8\xe5\xfe\x5f\x91\x65\x85\xae\x6b\x54\x25\x88\xad\xd5\xde\x08\x10\xf7\xfe\x96\xac\x22\x26\x27\xe0\x98\x01\xb8\x9d\xb6\x0c\x10\xb2\xae\xa4\x33\x15\x1e\xe0\x14\x02\x96\x9c\xf6\xb6\x20\x27\x32\x00\xac\x24\x3a\x72\x70\x09\x1f\xc5\xfd\x7f\x4e\xdc\x64\x19\x40\x0f\x60\xac\x54\x9c\x17\x95\x77\x4c\x56\x80\xd8\x12\xb7\x08\x3d\xc6\x00\xe2\x80\x75\x05\x7a\x03\x38\x04\xd3\xb7\x77\x54\xb0\x88\x29\x06\x79\xd7\xb2\xd2\x76\xbb\x3c\x6a\xbb\x45\x25\xbf\x20\x4b\xad\xde\x5f\x35\xcb\x53\xd6\xb2\xa7\xb8\xf4\x56\xad\x4e\x1f\x56\xd3\xa4\xd5\x31\x91\x8b\xef\xf7\x52\x95\xcd\xea\xa8\xb0\x26\x67\xb0\xa0\xf4\xde\x2c\xef\x9c\x56\x2d\x87\x9a\x78\xa7\xcb\xc0\xe1\xdd\xff\xeb\x8e\x96\xc5\x9a\x98\x2c\x88\x3e\xb3\xeb\x12\xc0\x3b\xdc\x12\x74\xcf\x25\x88\xeb\x2e\x26\xf4\xca\x3b\x1a\xb5\x08\x50\xd2\x06\x7d\xc5\xf9\x1e\x2b\x4f\x21\x3e\x2d\xf4\xdf\xa5\x33\xda\xc9\xc0\xbf\xad\x57\x68\xc5\xf4\x90\xbe\x37\x4f\x31\x7a\x9a\x4c\xa2\x32\xc3\x62\x80\x32\xc5\x00\xb0\xf4\xc9\x4b\x4b\x65\x5b\x86\xad\xa7\xa7\xc1\xc3\x7e\xce\x82\xaf\x77\x04\x21\x20\x10\xf8\x45\xe0\xcd\xb7\xb4\x57\x49\x37\x15\xdf\xe8\x39\x43\xec\xbd\x04\xa7\x89\x9d\x1e\x47\x22\x24\xc5\x92\x65\x97\x99\x84\x33\xcd\xec\x55\x94\x88\xe6\xb2\xcc\xb5\x09\xad\x63\x35\x6c\xef\xf9\x5d\x1d\x6e\x29\x6b\x88\xed\x4e\xb7\xec\xd1\x61\x59\x72\xbe\xe2\xbe\x58\x6c\x2f\x58\xb9\x44\x46\x71\x93\x56\x0b\x5d\xf9\x5a\x45\x8f\x67\x1d\xf5\x96\xc5\x22\x09\x6c\x31\x94\xfe\x02\x44\x61\x29\x3a\x6c\x2d\x6b\x72\x8c\xb5\x89\x8b\xc9\x69\xe5\xe0\x47\xda\xf1\xeb\x58\xe4\x54\xdc\x9b\x12\x99\xd6\xee\x9f\x7e\xf1\xe6\xbc\x43\xde\x12\x5f\xd0\x9e\x14\xbb\xf9\x7b\xa6\xfd\x0e\x1b\x6d\xd3\x55\x33\x3e\xe9\xb9\xbb\xe6\xb7\x5e\x30\x89\xf3\xdb\x15\xf3\xda\xaf\x98\x9f\xb1\x0c\x1f\x4c\x74\x87\x25\x0c\xf3\x64\x01\xa2\x26\x17\x18\x47\x43\x68\xaf\x38\xbc\x6c\xa4\x75\x3c\x32\x4e\x85\xc3\x85\x91\x21\x20\xc8\xb8\x46\x66\xb2\x01\xec\xd8\x83\x8d\xab\xc0\x2a\xa0\x56\xc8\x72\x4f\x79\xa7\xb3\xf0\x8c\x4a\xcf\x44\x35\xe7\x5b\x4f\x7f\x56\x64\x2f\xd2\xdf\x8a\x39\xff\x45\x29\x84\x40\xb7\x93\x06\x62\xf0\xa3\xb1\xff\xa2\x66\x1c\x76\xf1\xe6\xc8\x3f\xd9\x91\xd3\x21\x36\x98\x3b\x20\xa2\x0c\x3e\xa4\x88\xf8\x63\x34\xa6\xba\xc2\x4e\x5b\xce\x6f\x0f\x11\x71\x2e\x25\x21\x7c\xc7\x10\x1b\x68\xf0\xd9\x81\x16\x4e\x72\x30\xd4\xda\x7d\x75\x20\x15\xa0\x9a\x3a\xed\xa5\x0d\x75\xf1\x36\xe9\xfe\x42\x5f\x9d\x33\xf9\x4e\xd9\xaf\x74\x02\xfe\xb0\xd5\x9b\xec\x6b\x00\x00\x00\xff\xff\x59\x80\x8f\xb5\x8a\x0f\x00\x00"),
		},
		"/org.hcl": &vfsgen۰CompressedFileInfo{
			name:             "org.hcl",
			modTime:          time.Date(2020, 10, 8, 9, 54, 59, 539118407, time.UTC),
			uncompressedSize: 890,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x6a\xe3\x30\x10\x86\xef\x7e\x8a\x41\x97\xbd\xec\x62\xf6\x01\x72\x58\xc2\xd2\x16\x42\x5b\x68\x7a\x2a\x25\x0c\xb6\x6a\x0b\x6c\x49\xcc\x8c\x4a\xd3\x90\x77\x2f\x92\x1c\xe1\xb4\x09\xc9\xc1\x58\x48\xff\xfc\x33\xff\xf0\xa1\x37\x1b\x4f\xfa\xcd\x7c\xc0\x02\x54\x8d\xde\xd4\xef\x7f\x55\x55\x35\x6e\x1c\xd1\xb6\xa0\x3a\x72\xc1\x2b\x50\x8e\x3a\x05\xbb\x0a\x80\x7b\x47\x12\xc5\x0f\xd4\xa1\x35\x9f\x28\xc6\x59\x98\xf4\xac\x2a\x80\x52\xeb\xc9\x58\xd9\x34\x83\xd1\x56\x14\xa8\xc1\xb0\x64\x8f\x83\x4b\xb4\x59\x19\x16\xd8\xba\x40\xe0\x66\x86\xc9\x08\x60\xd4\xd2\xbb\x36\xca\x6e\xfe\xaf\xf3\x95\x47\xe9\x21\x55\xc6\x91\xd2\x15\x69\x0e\x83\x4c\xce\x45\x01\x0b\x78\x51\xc7\x9e\xaf\x93\xa2\x71\x43\x18\x2d\x27\x45\x6b\xd8\x0f\xb8\xbd\xc7\x51\xab\xdf\xa0\xec\xf4\x77\xd4\xdd\xb5\xf1\xd0\x90\x46\xd1\x6b\x8e\x67\xc3\xcb\x40\x14\xd3\x64\xa7\x7d\x95\xbf\x73\x89\x83\x6f\x51\xf4\xcf\xcc\xcf\xe9\x1e\xd0\x1e\x65\xfe\x1e\xf9\xf1\xdf\x7a\x79\x7b\x22\x74\xbd\x73\xd4\xed\x0f\x0f\x84\xa3\x16\x4d\xd3\xe4\x65\x09\x81\xb1\xd3\xb1\xe0\x49\x0b\x48\xaf\x4b\x27\x23\xce\x42\xd2\x96\x08\x47\x36\xf3\x7d\x5c\x76\x8b\x73\xff\x62\x98\x17\x5d\xb5\x99\xc8\xc2\x9f\xc0\x9a\xf8\x0c\x11\xb1\x49\x7a\x07\x63\x2f\x2d\xea\x34\x1b\x79\x4d\x75\x6e\x72\x89\x93\x16\x05\xaf\xc1\x23\xba\x65\x2e\x0a\x20\x2c\x28\x21\xe1\x41\x6e\x48\xa2\x01\x59\x56\xae\x33\x36\x53\x53\x08\x9a\x43\xb3\xff\x0a\x00\x00\xff\xff\x36\xdd\x9d\x3c\x7a\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/agent.hcl"].(os.FileInfo),
		fs["/auth.hcl"].(os.FileInfo),
		fs["/aws.hcl"].(os.FileInfo),
		fs["/cinderella.hcl"].(os.FileInfo),
		fs["/cluster.hcl"].(os.FileInfo),
		fs["/elevate.hcl"].(os.FileInfo),
		fs["/job.hcl"].(os.FileInfo),
		fs["/kubernetes.hcl"].(os.FileInfo),
		fs["/org.hcl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
