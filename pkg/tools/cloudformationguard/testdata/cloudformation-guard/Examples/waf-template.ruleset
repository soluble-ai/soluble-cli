AWS::ApiGateway::Deployment Description == CloudFormation Deployment Stage
AWS::ApiGateway::Deployment RestApiId == ApiGatewayBadBot
AWS::ApiGateway::Deployment StageName == CFDeploymentStage
AWS::ApiGateway::Method AuthorizationType == NONE
AWS::ApiGateway::Method HttpMethod == ANY
AWS::ApiGateway::Method Integration == {"IntegrationHttpMethod":"POST","Type":"AWS_PROXY","Uri":"arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaWAFBadBotParserFunction.Arn}/invocations"}
AWS::ApiGateway::Method RequestParameters == {"method.request.header.X-Forwarded-For":false}
AWS::ApiGateway::Method ResourceId == ApiGatewayBadBot.RootResourceId |OR| AWS::ApiGateway::Method ResourceId == ApiGatewayBadBotResource
AWS::ApiGateway::Method RestApiId == ApiGatewayBadBot
AWS::ApiGateway::Resource ParentId == ApiGatewayBadBot.RootResourceId
AWS::ApiGateway::Resource PathPart == {proxy+}
AWS::ApiGateway::Resource RestApiId == ApiGatewayBadBot
AWS::ApiGateway::RestApi Description == API created by AWS WAF Security Automations CloudFormation template. This endpoint will be used to capture bad bots.
AWS::ApiGateway::RestApi Name == Security Automations - WAF Bad Bot API
AWS::ApiGateway::Stage DeploymentId == ApiGatewayBadBotDeployment
AWS::ApiGateway::Stage Description == Production Stage
AWS::ApiGateway::Stage RestApiId == ApiGatewayBadBot
AWS::ApiGateway::Stage StageName == ProdStage
AWS::CloudFormation::Stack Parameters == {"ActivateHttpFloodProtectionParam":"ActivateHttpFloodProtectionParam","ActivateScannersProbesProtectionParam":"ActivateScannersProbesProtectionParam","AppAccessLogBucket":"AppAccessLogBucket","DeliveryStreamName":["HttpFloodProtectionLogParserActivated","CreateDeliveryStreamName.DeliveryStreamName",""],"EndpointType":"EndpointType","ErrorThreshold":"ErrorThreshold","GlueDatabaseName":["AthenaLogParser","CreateGlueDatabaseName.DatabaseName",""],"ParentStackName":"AWS::StackName","RequestThreshold":"RequestThreshold","WAFBlockPeriod":"WAFBlockPeriod","WafLogBucket":["HttpFloodProtectionLogParserActivated","WafLogBucket",""],"WafLogBucketArn":["HttpFloodProtectionLogParserActivated","WafLogBucket.Arn",""]} |OR| AWS::CloudFormation::Stack Parameters == {"ActivateBadBotProtectionParam":"ActivateBadBotProtectionParam","ActivateCrossSiteScriptingProtectionParam":"ActivateCrossSiteScriptingProtectionParam","ActivateHttpFloodProtectionParam":"ActivateHttpFloodProtectionParam","ActivateReputationListsProtectionParam":"ActivateReputationListsProtectionParam","ActivateScannersProbesProtectionParam":"ActivateScannersProbesProtectionParam","ActivateSqlInjectionProtectionParam":"ActivateSqlInjectionProtectionParam","AppAccessLogBucket":"AppAccessLogBucket","GlueAccessLogsDatabase":["AthenaLogParser","FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase",""],"GlueAppAccessLogsTable":["ScannersProbesAthenaLogParser","FirehoseAthenaStack.Outputs.CloudFrontGlueAppAccessLogsTable",""],"GlueWafAccessLogsTable":["HttpFloodAthenaLogParser","FirehoseAthenaStack.Outputs.GlueWafAccessLogsTable",""],"ParentStackName":"AWS::StackName","WafApiType":"waf","WafArnPrefix":"arn:aws:waf::","WafLogBucket":["HttpFloodProtectionLogParserActivated","WafLogBucket",""]} |OR| AWS::CloudFormation::Stack Parameters == {"ActivateBadBotProtectionParam":"ActivateBadBotProtectionParam","ActivateCrossSiteScriptingProtectionParam":"ActivateCrossSiteScriptingProtectionParam","ActivateHttpFloodProtectionParam":"ActivateHttpFloodProtectionParam","ActivateReputationListsProtectionParam":"ActivateReputationListsProtectionParam","ActivateScannersProbesProtectionParam":"ActivateScannersProbesProtectionParam","ActivateSqlInjectionProtectionParam":"ActivateSqlInjectionProtectionParam","AppAccessLogBucket":"AppAccessLogBucket","GlueAccessLogsDatabase":["AthenaLogParser","FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase",""],"GlueAppAccessLogsTable":["ScannersProbesAthenaLogParser","FirehoseAthenaStack.Outputs.ALBGlueAppAccessLogsTable",""],"GlueWafAccessLogsTable":["HttpFloodAthenaLogParser","FirehoseAthenaStack.Outputs.GlueWafAccessLogsTable",""],"ParentStackName":"AWS::StackName","WafApiType":"waf-regional","WafArnPrefix":"arn:aws:waf-regional:${AWS::Region}:","WafLogBucket":["HttpFloodProtectionLogParserActivated","WafLogBucket",""]}
AWS::CloudFormation::Stack TemplateURL == ["https://s3.amazonaws.com/${S3Bucket}-${AWS::Region}/${KeyPrefix}/aws-waf-security-automations-firehose-athena.template",{"KeyPrefix":["SourceCode","General","KeyPrefix"],"S3Bucket":["SourceCode","General","S3Bucket"]}] |OR| AWS::CloudFormation::Stack TemplateURL == ["https://s3.amazonaws.com/${S3Bucket}-${AWS::Region}/${KeyPrefix}/aws-waf-security-automations-cloudfront.template",{"KeyPrefix":["SourceCode","General","KeyPrefix"],"S3Bucket":["SourceCode","General","S3Bucket"]}] |OR| AWS::CloudFormation::Stack TemplateURL == ["https://s3.amazonaws.com/${S3Bucket}-${AWS::Region}/${KeyPrefix}/aws-waf-security-automations-alb.template",{"KeyPrefix":["SourceCode","General","KeyPrefix"],"S3Bucket":["SourceCode","General","S3Bucket"]}]
AWS::CloudWatch::Dashboard DashboardBody == ["{\n  \"widgets\": [{\n    \"type\": \"metric\",\n    \"x\": 0,\n    \"y\": 0,\n    \"width\": 15,\n    \"height\": 10,\n    \"properties\": {\n      \"view\": \"timeSeries\",\n      \"stacked\": false,\n      \"stat\": \"Sum\",\n      \"period\": 300,\n      \"metrics\": [\n        [\"WAF\", \"BlockedRequests\", \"WebACL\", \"${WAFWebACLMetricName}\", \"Rule\", \"ALL\" ${RegionMetric}],\n        [\"WAF\", \"AllowedRequests\", \"WebACL\", \"${WAFWebACLMetricName}\", \"Rule\", \"ALL\" ${RegionMetric}]\n      ],\n      \"region\": \"${RegionProperties}\"\n    }\n  }]\n}",{"RegionMetric":["AlbEndpoint",", \"Region\", \"${AWS::Region}\"",""],"RegionProperties":["AlbEndpoint","${AWS::Region}","us-east-1"],"WAFWebACLMetricName":["AlbEndpoint","AlbStack.Outputs.WAFWebACLMetricName","CloudFrontStack.Outputs.WAFWebACLMetricName"]}]
AWS::CloudWatch::Dashboard DashboardName == ${AWS::StackName}-${AWS::Region}
AWS::Events::Rule Description == Security Automations - App Logs Athena parser |OR| AWS::Events::Rule Description == Security Automations - WAF Logs Athena parser |OR| AWS::Events::Rule Description == Security Automations - WAF Reputation Lists
AWS::Events::Rule ScheduleExpression == rate(1 hour) |OR| AWS::Events::Rule ScheduleExpression == rate(5 minutes)
AWS::Events::Rule Targets == [{"Arn":"LambdaLogParserFunction.Arn","Id":"LambdaLogParserFunction","Input":"{\n  \"resourceType\": \"LambdaAthenaAppLogParser\",\n  \"glueAccessLogsDatabase\": \"${FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase}\",\n  \"accessLogBucket\": \"${AppAccessLogBucket}\",\n  \"logParserQuery\": \"${FirehoseAthenaStack.Outputs.AthenaAppLogParserQuery}\"\n}\n"}] |OR| AWS::Events::Rule Targets == [{"Arn":"LambdaLogParserFunction.Arn","Id":"LambdaLogParserFunction","Input":"{\n  \"resourceType\": \"LambdaAthenaWAFLogParser\",\n  \"glueAccessLogsDatabase\": \"${FirehoseAthenaStack.Outputs.GlueAccessLogsDatabase}\",\n  \"accessLogBucket\": \"${WafLogBucket}\",\n  \"logParserQuery\": \"${FirehoseAthenaStack.Outputs.AthenaWafLogParserQuery}\"\n}\n"}] |OR| AWS::Events::Rule Targets == [{"Arn":"LambdaWAFReputationListsParserFunction.Arn","Id":"LambdaWAFReputationListsParserFunction","Input":["{\n  \"lists\": [\n    {\"url\":\"https://www.spamhaus.org/drop/drop.txt\"},\n    {\"url\":\"https://www.spamhaus.org/drop/edrop.txt\"},\n    {\"url\":\"https://check.torproject.org/exit-addresses\", \"prefix\":\"ExitAddress\"},\n    {\"url\":\"https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt\"}\n  ],\n  \"apiType\": \"${ApiType}\",\n  \"region\": \"${AWS::Region}\",\n  \"ipSetIds\": [\"${WAFReputationListsSet}\"]\n}",{"ApiType":["AlbEndpoint","waf-regional","waf"],"WAFReputationListsSet":["AlbEndpoint","AlbStack.Outputs.WAFReputationListsSet","CloudFrontStack.Outputs.WAFReputationListsSet"]}]}]
AWS::IAM::Role AssumeRolePolicyDocument == {"Statement":[{"Action":["sts:AssumeRole"],"Effect":"Allow","Principal":{"Service":["lambda.amazonaws.com"]}}],"Version":"2012-10-17"}
AWS::IAM::Role Path == /
AWS::IAM::Role Policies == [{"PolicyDocument":{"Statement":[{"Action":["s3:GetBucketLocation","s3:GetObject","s3:ListBucket"],"Effect":"Allow","Resource":["arn:aws:s3:::${AppAccessLogBucket}"]}],"Version":"2012-10-17"},"PolicyName":"S3Access"},{"PolicyDocument":{"Statement":[{"Action":["logs:CreateLogGroup","logs:CreateLogStream","logs:PutLogEvents"],"Effect":"Allow","Resource":["arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"]}],"Version":"2012-10-17"},"PolicyName":"LogsAccess"}]
AWS::Lambda::Function Code == {"S3Bucket":["-",[["SourceCode","General","S3Bucket"],"AWS::Region"]],"S3Key":["/",[["SourceCode","General","KeyPrefix"],"custom-resource.zip"]]} |OR| AWS::Lambda::Function Code == {"S3Bucket":["-",[["SourceCode","General","S3Bucket"],"AWS::Region"]],"S3Key":["/",[["SourceCode","General","KeyPrefix"],"reputation-lists-parser.zip"]]} |OR| AWS::Lambda::Function Code == {"S3Bucket":["-",[["SourceCode","General","S3Bucket"],"AWS::Region"]],"S3Key":["/",[["SourceCode","General","KeyPrefix"],"access-handler.zip"]]} |OR| AWS::Lambda::Function Code == {"S3Bucket":["-",[["SourceCode","General","S3Bucket"],"AWS::Region"]],"S3Key":["/",[["SourceCode","General","KeyPrefix"],"log-parser.zip"]]} |OR| AWS::Lambda::Function Code == {"S3Bucket":["-",[["SourceCode","General","S3Bucket"],"AWS::Region"]],"S3Key":["/",[["SourceCode","General","KeyPrefix"],"helper.zip"]]}
AWS::Lambda::Function Description == This function parses access logs to identify suspicious behavior, such as an abnormal amount of errors. It then blocks those IP addresses for a customer-defined period of time. Parameters: ${RequestThreshold}, ${ErrorThreshold} and ${WAFBlockPeriod}. |OR| AWS::Lambda::Function Description == This lambda function checks third-party IP reputation lists hourly for new IP ranges to block. These lists include the Spamhaus Dont Route Or Peer (DROP) and Extended Drop (EDROP) lists, the Proofpoint Emerging Threats IP list, and the Tor exit node list. |OR| AWS::Lambda::Function Description == This lambda function will intercepts and inspects trap endpoint requests to extract its IP address, and then add it to an AWS WAF block list. |OR| AWS::Lambda::Function Description == This lambda function configures the Web ACL rules based on the features enabled in the CloudFormation template. |OR| AWS::Lambda::Function Description == This lambda function verifies the main project's dependencies, requirements and implement auxiliary functions.
AWS::Lambda::Function Environment == {"Variables":{"APP_ACCESS_LOG_BUCKET":["ScannersProbesProtectionActivated","AppAccessLogBucket","AWS::NoValue"],"IP_SET_ID_HTTP_FLOOD":["HttpFloodProtectionLogParserActivated",["AlbEndpoint","AlbStack.Outputs.WAFHttpFloodSet","CloudFrontStack.Outputs.WAFHttpFloodSet"],"AWS::NoValue"],"IP_SET_ID_SCANNERS_PROBES":["ScannersProbesProtectionActivated",["AlbEndpoint","AlbStack.Outputs.WAFScannersProbesSet","CloudFrontStack.Outputs.WAFScannersProbesSet"],"AWS::NoValue"],"LIMIT_IP_ADDRESS_RANGES_PER_IP_MATCH_CONDITION":"10000","LOG_LEVEL":["Solution","Data","LogLevel"],"LOG_TYPE":["AlbEndpoint","alb","cloudfront"],"MAX_AGE_TO_UPDATE":"30","METRIC_NAME_PREFIX":["",["-","AWS::StackName"]],"REGION":"AWS::Region","SEND_ANONYMOUS_USAGE_DATA":["Solution","Data","SendAnonymousUsageData"],"STACK_NAME":"AWS::StackName","UUID":"CreateUniqueID.UUID","WAF_ACCESS_LOG_BUCKET":["HttpFloodProtectionLogParserActivated","WafLogBucket","AWS::NoValue"]}} |OR| AWS::Lambda::Function Environment == {"Variables":{"IP_SET_ID_BAD_BOT":["AlbEndpoint","AlbStack.Outputs.WAFBadBotSet","CloudFrontStack.Outputs.WAFBadBotSet"],"LOG_LEVEL":["Solution","Data","LogLevel"],"LOG_TYPE":["AlbEndpoint","alb","cloudfront"],"METRIC_NAME_PREFIX":["",["-","AWS::StackName"]],"REGION":"AWS::Region","SEND_ANONYMOUS_USAGE_DATA":["Solution","Data","SendAnonymousUsageData"],"UUID":"CreateUniqueID.UUID"}} |OR| AWS::Lambda::Function Environment == {"Variables":{"API_TYPE":["AlbEndpoint","waf-regional","waf"],"LOG_LEVEL":["Solution","Data","LogLevel"]}} |OR| AWS::Lambda::Function Environment == {"Variables":{"LOG_LEVEL":["Solution","Data","LogLevel"],"METRIC_NAME_PREFIX":["",["-","AWS::StackName"]],"SEND_ANONYMOUS_USAGE_DATA":["Solution","Data","SendAnonymousUsageData"],"UUID":"CreateUniqueID.UUID"}}
AWS::Lambda::Function Handler == log-parser.lambda_handler |OR| AWS::Lambda::Function Handler == custom-resource.lambda_handler |OR| AWS::Lambda::Function Handler == access-handler.lambda_handler |OR| AWS::Lambda::Function Handler == helper.lambda_handler |OR| AWS::Lambda::Function Handler == reputation-lists-parser.handler
AWS::Lambda::Function MemorySize == 256 |OR| AWS::Lambda::Function MemorySize == 512 |OR| AWS::Lambda::Function MemorySize == 128
AWS::Lambda::Function Role == ["AlbEndpoint","AlbStack.Outputs.LambdaRoleBadBotArn","CloudFrontStack.Outputs.LambdaRoleBadBotArn"] |OR| AWS::Lambda::Function Role == ["AlbEndpoint","AlbStack.Outputs.LambdaRoleLogParserArn","CloudFrontStack.Outputs.LambdaRoleLogParserArn"] |OR| AWS::Lambda::Function Role == ["AlbEndpoint","AlbStack.Outputs.LambdaRoleCustomResourceArn","CloudFrontStack.Outputs.LambdaRoleCustomResourceArn"] |OR| AWS::Lambda::Function Role == ["AlbEndpoint","AlbStack.Outputs.LambdaRoleReputationListsParserArn","CloudFrontStack.Outputs.LambdaRoleReputationListsParserArn"] |OR| AWS::Lambda::Function Role == LambdaRoleHelper.Arn
AWS::Lambda::Function Runtime == nodejs8.10 |OR| AWS::Lambda::Function Runtime == python3.7
AWS::Lambda::Function Timeout == 300
AWS::Lambda::Permission Action == lambda:* |OR| AWS::Lambda::Permission Action == lambda:InvokeFunction
AWS::Lambda::Permission FunctionName == LambdaWAFReputationListsParserFunction |OR| AWS::Lambda::Permission FunctionName == LambdaLogParserFunction |OR| AWS::Lambda::Permission FunctionName == LambdaWAFBadBotParserFunction.Arn |OR| AWS::Lambda::Permission FunctionName == LambdaLogParserFunction.Arn
AWS::Lambda::Permission Principal == apigateway.amazonaws.com |OR| AWS::Lambda::Permission Principal == s3.amazonaws.com |OR| AWS::Lambda::Permission Principal == events.amazonaws.com
AWS::Lambda::Permission SourceAccount == AWS::AccountId
AWS::Lambda::Permission SourceArn == LambdaAthenaAppLogParser.Arn |OR| AWS::Lambda::Permission SourceArn == LambdaWAFReputationListsParserEventsRule.Arn |OR| AWS::Lambda::Permission SourceArn == LambdaAthenaWAFLogParser.Arn
AWS::S3::Bucket AccessControl == Private
AWS::S3::Bucket PublicAccessBlockConfiguration == {"BlockPublicAcls":true,"BlockPublicPolicy":true,"IgnorePublicAcls":true,"RestrictPublicBuckets":true}
Custom::CheckRequirements AppAccessLogBucket == AppAccessLogBucket
Custom::CheckRequirements AthenaLogParser == ["AthenaLogParser","yes","no"]
Custom::CheckRequirements EndpointType == EndpointType
Custom::CheckRequirements HttpFloodProtectionLogParserActivated == ["HttpFloodProtectionLogParserActivated","yes","no"]
Custom::CheckRequirements HttpFloodProtectionRateBasedRuleActivated == ["HttpFloodProtectionRateBasedRuleActivated","yes","no"]
Custom::CheckRequirements ProtectionActivatedScannersProbes == ["ScannersProbesProtectionActivated","yes","no"]
Custom::CheckRequirements Region == AWS::Region
Custom::CheckRequirements RequestThreshold == RequestThreshold
Custom::CheckRequirements ServiceToken == LambdaWAFHelperFunction.Arn
Custom::ConfigureAWSWAFLogs DeliveryStreamArn == FirehoseAthenaStack.Outputs.FirehoseWAFLogsDeliveryStreamArn
Custom::ConfigureAWSWAFLogs ServiceToken == LambdaWAFCustomResourceFunction.Arn
Custom::ConfigureAWSWAFLogs WAFWebACLArn == ["AlbEndpoint","AlbStack.Outputs.WAFWebACLArn","CloudFrontStack.Outputs.WAFWebACLArn"]
Custom::ConfigureAppAccessLogBucket AppAccessLogBucket == AppAccessLogBucket
Custom::ConfigureAppAccessLogBucket LambdaLogParserFunction == ["LogParser","LambdaLogParserFunction.Arn","AWS::NoValue"]
Custom::ConfigureAppAccessLogBucket Region == AWS::Region
Custom::ConfigureAppAccessLogBucket ScannersProbesAthenaLogParser == ["ScannersProbesAthenaLogParser","yes","no"]
Custom::ConfigureAppAccessLogBucket ScannersProbesLambdaLogParser == ["ScannersProbesLambdaLogParser","yes","no"]
Custom::ConfigureAppAccessLogBucket ServiceToken == LambdaWAFCustomResourceFunction.Arn
Custom::ConfigureRateBasedRule MetricNamePrefix == ["",["-","AWS::StackName"]]
Custom::ConfigureRateBasedRule RequestThreshold == RequestThreshold
Custom::ConfigureRateBasedRule ServiceToken == LambdaWAFCustomResourceFunction.Arn
Custom::ConfigureRateBasedRule StackName == AWS::StackName
Custom::ConfigureWafLogBucket HttpFloodAthenaLogParser == ["HttpFloodAthenaLogParser","yes","no"]
Custom::ConfigureWafLogBucket HttpFloodLambdaLogParser == ["HttpFloodLambdaLogParser","yes","no"]
Custom::ConfigureWafLogBucket LambdaLogParserFunction == ["LogParser","LambdaLogParserFunction.Arn","AWS::NoValue"]
Custom::ConfigureWafLogBucket ServiceToken == LambdaWAFCustomResourceFunction.Arn
Custom::ConfigureWafLogBucket WafLogBucket == WafLogBucket
Custom::ConfigureWebAcl ActionWAFBadBotRule == ["Solution","Action","WAFBadBotRule"]
Custom::ConfigureWebAcl ActionWAFBlacklistRule == ["Solution","Action","WAFBlacklistRule"]
Custom::ConfigureWebAcl ActionWAFHttpFloodRateBasedRule == ["Solution","Action","WAFHttpFloodRateBasedRule"]
Custom::ConfigureWebAcl ActionWAFHttpFloodRegularRule == ["Solution","Action","WAFHttpFloodRegularRule"]
Custom::ConfigureWebAcl ActionWAFIPReputationListsRule == ["Solution","Action","WAFIPReputationListsRule"]
Custom::ConfigureWebAcl ActionWAFScannersProbesRule == ["Solution","Action","WAFScannersProbesRule"]
Custom::ConfigureWebAcl ActionWAFSqlInjectionRule == ["Solution","Action","WAFSqlInjectionRule"]
Custom::ConfigureWebAcl ActionWAFWhitelistRule == ["Solution","Action","WAFWhitelistRule"]
Custom::ConfigureWebAcl ActionWAFXssRule == ["Solution","Action","WAFXssRule"]
Custom::ConfigureWebAcl ActivateBadBotProtectionParam == ActivateBadBotProtectionParam
Custom::ConfigureWebAcl ActivateCrossSiteScriptingProtectionParam == ActivateCrossSiteScriptingProtectionParam
Custom::ConfigureWebAcl ActivateHttpFloodProtectionParam == ActivateHttpFloodProtectionParam
Custom::ConfigureWebAcl ActivateReputationListsProtectionParam == ActivateReputationListsProtectionParam
Custom::ConfigureWebAcl ActivateScannersProbesProtectionParam == ActivateScannersProbesProtectionParam
Custom::ConfigureWebAcl ActivateSqlInjectionProtectionParam == ActivateSqlInjectionProtectionParam
Custom::ConfigureWebAcl ErrorThreshold == ErrorThreshold
Custom::ConfigureWebAcl ProtectionActivatedBadBot == ["BadBotProtectionActivated","yes","no"]
Custom::ConfigureWebAcl ProtectionActivatedCrossSiteScripting == ["CrossSiteScriptingProtectionActivated","yes","no"]
Custom::ConfigureWebAcl ProtectionActivatedHttpFloodRateBased == ["HttpFloodProtectionRateBasedRuleActivated","yes","no"]
Custom::ConfigureWebAcl ProtectionActivatedHttpFloodRegular == ["HttpFloodProtectionLogParserActivated","yes","no"]
Custom::ConfigureWebAcl ProtectionActivatedReputationLists == ["ReputationListsProtectionActivated","yes","no"]
Custom::ConfigureWebAcl ProtectionActivatedScannersProbes == ["ScannersProbesProtectionActivated","yes","no"]
Custom::ConfigureWebAcl ProtectionActivatedSqlInjection == ["SqlInjectionProtectionActivated","yes","no"]
Custom::ConfigureWebAcl Region == AWS::Region
Custom::ConfigureWebAcl RequestThreshold == RequestThreshold
Custom::ConfigureWebAcl SendAnonymousUsageData == ["Solution","Data","SendAnonymousUsageData"]
Custom::ConfigureWebAcl ServiceToken == LambdaWAFCustomResourceFunction.Arn
Custom::ConfigureWebAcl UUID == CreateUniqueID.UUID
Custom::ConfigureWebAcl WAFBadBotRule == ["BadBotProtectionActivated",["AlbEndpoint","AlbStack.Outputs.WAFBadBotRule","CloudFrontStack.Outputs.WAFBadBotRule"],"AWS::NoValue"]
Custom::ConfigureWebAcl WAFBadBotSet == ["BadBotProtectionActivated",["AlbEndpoint","AlbStack.Outputs.WAFBadBotSet","CloudFrontStack.Outputs.WAFBadBotSet"],"AWS::NoValue"]
Custom::ConfigureWebAcl WAFBlacklistRule == ["AlbEndpoint","AlbStack.Outputs.WAFBlacklistRule","CloudFrontStack.Outputs.WAFBlacklistRule"]
Custom::ConfigureWebAcl WAFBlacklistSet == ["AlbEndpoint","AlbStack.Outputs.WAFBlacklistSet","CloudFrontStack.Outputs.WAFBlacklistSet"]
Custom::ConfigureWebAcl WAFBlockPeriod == WAFBlockPeriod
Custom::ConfigureWebAcl WAFHttpFloodRateBasedRule == ["HttpFloodProtectionRateBasedRuleActivated","ConfigureRateBasedRule.RateBasedRuleId","AWS::NoValue"]
Custom::ConfigureWebAcl WAFHttpFloodRegularRule == ["HttpFloodProtectionLogParserActivated",["AlbEndpoint","AlbStack.Outputs.WAFHttpFloodRegularRule","CloudFrontStack.Outputs.WAFHttpFloodRegularRule"],"AWS::NoValue"]
Custom::ConfigureWebAcl WAFHttpFloodSet == ["HttpFloodProtectionLogParserActivated",["AlbEndpoint","AlbStack.Outputs.WAFHttpFloodSet","CloudFrontStack.Outputs.WAFHttpFloodSet"],"AWS::NoValue"]
Custom::ConfigureWebAcl WAFIPReputationListsRule == ["ReputationListsProtectionActivated",["AlbEndpoint","AlbStack.Outputs.WAFIPReputationListsRule","CloudFrontStack.Outputs.WAFIPReputationListsRule"],"AWS::NoValue"]
Custom::ConfigureWebAcl WAFReputationListsSet == ["ReputationListsProtectionActivated",["AlbEndpoint","AlbStack.Outputs.WAFReputationListsSet","CloudFrontStack.Outputs.WAFReputationListsSet"],"AWS::NoValue"]
Custom::ConfigureWebAcl WAFScannersProbesRule == ["ScannersProbesProtectionActivated",["AlbEndpoint","AlbStack.Outputs.WAFScannersProbesRule","CloudFrontStack.Outputs.WAFScannersProbesRule"],"AWS::NoValue"]
Custom::ConfigureWebAcl WAFScannersProbesSet == ["ScannersProbesProtectionActivated",["AlbEndpoint","AlbStack.Outputs.WAFScannersProbesSet","CloudFrontStack.Outputs.WAFScannersProbesSet"],"AWS::NoValue"]
Custom::ConfigureWebAcl WAFSqlInjectionRule == ["SqlInjectionProtectionActivated",["AlbEndpoint","AlbStack.Outputs.WAFSqlInjectionRule","CloudFrontStack.Outputs.WAFSqlInjectionRule"],"AWS::NoValue"]
Custom::ConfigureWebAcl WAFWebACL == ["AlbEndpoint","AlbStack.Outputs.WAFWebACL","CloudFrontStack.Outputs.WAFWebACL"]
Custom::ConfigureWebAcl WAFWhitelistRule == ["AlbEndpoint","AlbStack.Outputs.WAFWhitelistRule","CloudFrontStack.Outputs.WAFWhitelistRule"]
Custom::ConfigureWebAcl WAFWhitelistSet == ["AlbEndpoint","AlbStack.Outputs.WAFWhitelistSet","CloudFrontStack.Outputs.WAFWhitelistSet"]
Custom::ConfigureWebAcl WAFXssRule == ["CrossSiteScriptingProtectionActivated",["AlbEndpoint","AlbStack.Outputs.WAFXssRule","CloudFrontStack.Outputs.WAFXssRule"],"AWS::NoValue"]
Custom::CreateDeliveryStreamName ServiceToken == LambdaWAFHelperFunction.Arn
Custom::CreateDeliveryStreamName StackName == AWS::StackName
Custom::CreateGlueDatabaseName ServiceToken == LambdaWAFHelperFunction.Arn
Custom::CreateGlueDatabaseName StackName == AWS::StackName
Custom::CreateUUID ServiceToken == LambdaWAFHelperFunction.Arn
Custom::GenerateAppLogParserConfFile AppAccessLogBucket == AppAccessLogBucket
Custom::GenerateAppLogParserConfFile ErrorThreshold == ErrorThreshold
Custom::GenerateAppLogParserConfFile ServiceToken == LambdaWAFCustomResourceFunction.Arn
Custom::GenerateAppLogParserConfFile StackName == AWS::StackName
Custom::GenerateAppLogParserConfFile WAFBlockPeriod == WAFBlockPeriod
Custom::GenerateAppLogParserConfFile WAFScannersProbesSet == ["AlbEndpoint","AlbStack.Outputs.WAFScannersProbesSet","CloudFrontStack.Outputs.WAFScannersProbesSet"]
Custom::GenerateWafLogParserConfFile RequestThreshold == RequestThreshold
Custom::GenerateWafLogParserConfFile ServiceToken == LambdaWAFCustomResourceFunction.Arn
Custom::GenerateWafLogParserConfFile StackName == AWS::StackName
Custom::GenerateWafLogParserConfFile WAFBlockPeriod == WAFBlockPeriod
Custom::GenerateWafLogParserConfFile WAFHttpFloodSet == ["AlbEndpoint","AlbStack.Outputs.WAFHttpFloodSet","CloudFrontStack.Outputs.WAFHttpFloodSet"]
Custom::GenerateWafLogParserConfFile WafAccessLogBucket == WafLogBucket
Custom::PopulateReputationList LambdaWAFReputationListsParserFunction == LambdaWAFReputationListsParserFunction.Arn
Custom::PopulateReputationList Region == AWS::Region
Custom::PopulateReputationList ServiceToken == LambdaWAFCustomResourceFunction.Arn
Custom::PopulateReputationList WAFReputationListsSet == ["AlbEndpoint","AlbStack.Outputs.WAFReputationListsSet","CloudFrontStack.Outputs.WAFReputationListsSet"]
